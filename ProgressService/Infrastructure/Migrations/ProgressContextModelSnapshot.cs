// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProgressContext))]
    partial class ProgressContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ProblemStats", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AvgPoint")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubmission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProblemStats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvgPoint = 10,
                            TotalSubmission = 4
                        },
                        new
                        {
                            Id = 2,
                            AvgPoint = 7,
                            TotalSubmission = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Submission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Point = 9,
                            ProblemId = 1,
                            ProgrammingLanguage = "c sharp",
                            SubmissionAt = new DateTime(2025, 9, 10, 10, 52, 40, 861, DateTimeKind.Local).AddTicks(582),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Point = 8,
                            ProblemId = 1,
                            ProgrammingLanguage = "java",
                            SubmissionAt = new DateTime(2025, 9, 10, 10, 52, 40, 861, DateTimeKind.Local).AddTicks(595),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Point = 7,
                            ProblemId = 2,
                            ProgrammingLanguage = "python",
                            SubmissionAt = new DateTime(2025, 9, 10, 10, 52, 40, 861, DateTimeKind.Local).AddTicks(637),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Point = 6,
                            ProblemId = 1,
                            ProgrammingLanguage = "c++",
                            SubmissionAt = new DateTime(2025, 9, 10, 10, 52, 40, 861, DateTimeKind.Local).AddTicks(638),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Point = 5,
                            ProblemId = 1,
                            ProgrammingLanguage = "c++",
                            SubmissionAt = new DateTime(2025, 9, 10, 10, 52, 40, 861, DateTimeKind.Local).AddTicks(639),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserProgress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("EasySolved")
                        .HasColumnType("int");

                    b.Property<int>("HardSolved")
                        .HasColumnType("int");

                    b.Property<int>("MediumSolved")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubmission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserProgress", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EasySolved = 2,
                            HardSolved = 0,
                            MediumSolved = 0,
                            Rank = 900,
                            TotalSubmission = 2
                        },
                        new
                        {
                            Id = 2,
                            EasySolved = 2,
                            HardSolved = 0,
                            MediumSolved = 1,
                            Rank = 700,
                            TotalSubmission = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Submission", b =>
                {
                    b.OwnsOne("Domain.ValueEntities.EvaluationCriteria", "EvaluationCriteria", b1 =>
                        {
                            b1.Property<int>("SubmissionId")
                                .HasColumnType("int");

                            b1.Property<string>("Algorithm")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Algorithm");

                            b1.Property<string>("CleanCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CleanCode");

                            b1.HasKey("SubmissionId");

                            b1.ToTable("Submission");

                            b1.WithOwner()
                                .HasForeignKey("SubmissionId");

                            b1.HasData(
                                new
                                {
                                    SubmissionId = 1,
                                    Algorithm = "Correct & efficient",
                                    CleanCode = "Readable, basic C# conventions, could use comments"
                                },
                                new
                                {
                                    SubmissionId = 2,
                                    Algorithm = "Correct but could be optimized",
                                    CleanCode = "Generally clean, some inconsistent naming"
                                },
                                new
                                {
                                    SubmissionId = 3,
                                    Algorithm = "Minor flaws, edge cases",
                                    CleanCode = "Somewhat messy, poor indentation"
                                },
                                new
                                {
                                    SubmissionId = 4,
                                    Algorithm = "Inefficient, large inputs",
                                    CleanCode = "Difficult to read, poor variable names, no comments"
                                },
                                new
                                {
                                    SubmissionId = 5,
                                    Algorithm = "Incorrect, doesn't solve problem",
                                    CleanCode = "Very messy, unstructured, hard to follow"
                                });
                        });

                    b.Navigation("EvaluationCriteria")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
